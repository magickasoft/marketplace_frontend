root: true

parser: 'babel-eslint'

extends:
  - eslint:recommended
  - plugin:react/recommended

plugins:
  - 'react'
  - 'lodash-fp'
  - 'ava'

ecmaFeatures:
  classes: true

env:
  browser: true
  node: true
  es6: true

globals:
  __DEVELOPMENT__: true
  __PRODUCTION__: true

rules:
  ### POSSIBLE ERRORS ###

  comma-dangle:                # disallow trailing commas in object literals
    - 2
    - 'never'
  no-cond-assign:              # disallow assignment in conditional expressions
    - 2
    - 'always'
  no-console: 2                # disallow use of console (off by default in the node environment)
  no-constant-condition: 2     # disallow use of constant expressions in conditions
  no-debugger: 2               # disallow use of debugger
  no-dupe-args: 2
  no-dupe-keys: 2              # disallow duplicate keys when creating object literals
  no-duplicate-case: 2
  no-empty: 2                  # disallow empty statements
  no-empty-character-class: 2  # disallow the use of empty character classes in regular expressions
  no-ex-assign: 2              # disallow assigning to the exception in a catch block
  no-extra-boolean-cast: 2     # disallow double-negation boolean casts in a boolean context
  no-extra-parens:             # disallow unnecessary parentheses (off by default)
    - 2
    - 'functions'
  no-extra-semi: 2             # disallow unnecessary semicolons
  no-func-assign: 1            # disallow overwriting functions written as function declarations
  no-inner-declarations:       # disallow function or variable declarations in nested blocks
    - 2
    - 'functions'
  no-invalid-regexp: 2         # disallow invalid regular expression strings in the RegExp constructor
  no-irregular-whitespace: 2   # disallow irregular whitespace outside of strings and comments
  no-negated-in-lhs: 2         # disallow negation of the left operand of an in expression
  no-obj-calls: 2              # disallow the use of object properties of the global object (Math and JSON) as functions
  no-regex-spaces: 2           # disallow multiple spaces in a regular expression literal
  no-sparse-arrays: 2          # disallow sparse arrays
  no-unreachable: 2            # disallow unreachable statements after a return throw continue or break statement
  use-isnan: 2                 # disallow comparisons with the value NaN
  valid-jsdoc: 0               # Ensure JSDoc comments are valid (off by default)
  valid-typeof: 2              # Ensure that the results of typeof are compared against a valid string


  ### BEST PRACTICES ###

  block-scoped-var: 1      # treat var statements as if they were block scoped (off by default)
  complexity: 0            # specify the maximum cyclomatic complexity allowed in a program (off by default)
  consistent-return: 2     # require return statements to either always or never specify values
  curly: 1                 # specify curly brace conventions for all control statements
  default-case: 1          # require default case in switch statements (off by default)
  dot-notation: 0          # encourages use of dot notation whenever possible
  dot-location:
    - 2
    - 'property'
  eqeqeq: 0                # require the use of === and !==
  guard-for-in: 2          # make sure for-in loops have an if statement (off by default)
  no-alert: 2              # disallow the use of alert, confirm, and prompt
  no-caller: 2             # disallow use of arguments.caller or arguments.callee
  no-div-regex: 2          # disallow division operators explicitly at beginning of regular expression (off by default)
  no-else-return: 2        # disallow else after a return in an if (off by default)
  no-empty-label: 0        # disallow use of labels for anything other then loops and switches
  no-eq-null: 2            # disallow comparisons to null without a type-checking operator (off by default)
  no-eval: 2               # disallow use of eval()
  no-extend-native: 2      # disallow adding to native types
  no-extra-bind: 2         # disallow unnecessary function binding
  no-fallthrough: 2        # disallow fallthrough of case statements
  no-floating-decimal: 2   # disallow the use of leading or trailing decimal points in numeric literals (off by default)
  no-implied-eval: 2       # disallow use of eval()-like methods
  no-iterator: 2           # disallow usage of __iterator__ property
  no-labels: 2             # disallow use of labeled statements
  no-lone-blocks: 2        # disallow unnecessary nested blocks
  no-loop-func: 2          # disallow creation of functions within loops
  no-multi-spaces: 2       # disallow use of multiple spaces
  no-multi-str: 1          # disallow use of multiline strings
  no-native-reassign: 2    # disallow reassignments of native objects
  no-new: 2                # disallow use of new operator when not part of the assignment or comparison
  no-new-func: 2           # disallow use of new operator for Function object
  no-new-wrappers: 2       # disallows creating new instances of String, Number, and Boolean
  no-octal: 1              # disallow use of octal literals
  no-octal-escape: 2       # disallow use of octal escape sequences in string literals, such as var foo = 'Copyright \251";
  no-param-reassign: 2     # disallow reassignment of function parameters
  no-process-env: 0        # disallow use of process.env (off by default)
  no-proto: 2              # disallow usage of __proto__ property
  no-redeclare: 2          # disallow declaring the same variable more then once
  no-return-assign:        # disallow use of assignment in return statement
    - 2
    - 'always'
  no-script-url: 2         # disallow use of javascript urls.
  no-self-compare: 1       # disallow comparisons where both sides are exactly the same (off by default)
  no-sequences: 2          # disallow use of comma operator
  no-throw-literal: 2
  no-unused-expressions: 2 # disallow usage of expressions in statement position
  no-void: 2               # disallow use of void operator (off by default)
  no-warning-comments: 1   # disallow usage of configurable warning terms in comments, e.g. TODO or FIXME (off by default)
  no-with: 2               # disallow use of the with statement
  radix: 2                 # require use of the second argument for parseInt() (off by default)
  vars-on-top: 0           # requires to declare all vars on top of their containing scope (off by default)
  wrap-iife: 0             # Отключено не то, что мы хотим 2
  yoda: 2                  # require or disallow Yoda conditions


  ### STRICT MODE ###

  strict: 0


  ### VARIABLES ###

  no-catch-shadow: 2             # disallow the catch clause parameter name being the same as a variable in the outer scope (off by default in the node environment)
  no-delete-var: 2               # disallow deletion of variables
  no-label-var: 2                # disallow labels that share a name with a variable
  no-shadow: 2                   # disallow declaration of variables already declared in the outer scope
  no-shadow-restricted-names: 2  # disallow shadowing of names such as arguments
  no-undef: 2                    # disallow use of undeclared variables unless mentioned in a /*global */ block
  no-undef-init: 2               # disallow use of undefined when initializing variables
  no-undefined: 2                # disallow use of undefined variable (off by default)
  no-unused-vars:                # disallow declaration of variables that are not used in the code
    - 2
    - vars: 'all'
  no-use-before-define:          # disallow use of variables before they are defined
    - 2
    - 'nofunc'


  ### NODE.JS ###

  handle-callback-err: 0   # enforces error handling in callbacks (off by default) (on by default in the node environment)
  no-mixed-requires: 2     # disallow mixing regular variable and require declarations (off by default) (on by default in the node environment)
  no-new-require: 2        # disallow use of new operator with the require function (off by default) (on by default in the node environment)
  no-path-concat: 2        # disallow string concatenation with __dirname and __filename (off by default) (on by default in the node environment)
  no-process-exit: 2       # disallow process.exit() (on by default in the node environment)
  no-restricted-modules: 0 # restrict usage of specified node modules (off by default)
  no-sync: 0               # disallow use of synchronous methods (off by default)


  ### STYLISTIC ISSUES ###

  brace-style:                   # enforce one true brace style (off by default)
    - 2
    - '1tbs'
  camelcase:                     # require camel case names
    - 2
    - properties: 'never'
  comma-spacing:                 # enforce spacing before and after comma
    - 2
    - before: false
      after: true
  comma-style:                   # enforce one true comma style (off by default)
    - 2
    - 'last'
  consistent-this: 0             # enforces consistent naming when capturing the current execution context (off by default)
  eol-last: 2                    # enforce newline at the end of file, with no multiple empty lines
  func-names: 2                  # require function expressions to have a name (off by default)
  func-style: 0                  # enforces use of function declarations or expressions (off by default)
  indent:
    - 2
    - 4
    - SwitchCase: 1
  key-spacing:                   # enforces spacing between keys and values in object literal properties
    - 2
    - beforeColon: false
      afterColon: true
  lines-around-comment: 0
  linebreak-style:
    - 2
    - 'unix'
  max-nested-callbacks:          # specify the maximum depth callbacks can be nested (off by default)
    - 2
    - 4
  new-cap:                       # require a capital letter for constructors
    - 2
    - capIsNew: false
  new-parens: 2                  # disallow the omission of parentheses when invoking a constructor with no arguments
  newline-after-var: 0
  no-array-constructor: 2        # disallow use of the Array constructor
  no-continue: 0
  no-inline-comments: 0          # disallow comments inline after code (off by default)
  no-lonely-if: 0                # disallow if as the only statement in an else block (off by default)
  no-mixed-spaces-and-tabs: 2    # disallow mixed spaces and tabs for indentation
  no-multiple-empty-lines:       # disallow multiple empty lines (off by default)
    - 2
    - max: 2
  no-nested-ternary: 2           # disallow nested ternary expressions (off by default)
  no-new-object: 2               # disallow use of the Object constructor
  no-spaced-func: 2              # disallow space between function identifier and application
  no-ternary: 0                  # disallow the use of ternary operators (off by default)
  no-trailing-spaces: 2          # disallow trailing whitespace at the end of lines
  no-underscore-dangle: 0        # disallow dangling underscores in identifiers
  no-unneeded-ternary: 2
  object-curly-spacing: 0
  one-var:                       # allow just one var statement per function (off by default)
    - 2
    - uninitialized: 'never'
      initialized: 'never'
  operator-assignment:           # require assignment operator shorthand where possible or prohibit it entirely (off by default)
    - 2
    - 'always'
  operator-linebreak:
    - 2
    - 'after'
  padded-blocks: 0               # enforce padding within blocks (off by default)
  quote-props:                   # require quotes around object literal property names (off by default)
    - 2
    - 'as-needed'
  quotes:                        # specify whether double or single quotes should be used
    - 2
    - 'single'
    - 'avoid-escape'
  semi-spacing:
    - 2
    - before: false
      after: true
  semi:                          # require or disallow use of semicolons instead of ASI
    - 2
    - 'always'
  sort-vars: 0                   # sort variables within the same declaration block (off by default)
  space-before-function-paren:   # require a space after function names (off by default)
    - 2
    - 'never'
  space-before-blocks:           # require or disallow space before blocks (off by default)
    - 2
    - 'always'
  space-in-parens: 0             # require or disallow spaces inside parentheses (off by default) TODO разобрать дополнительно
  space-infix-ops: 2             # require spaces around operators
  spaced-comment:                # require or disallow a space immediately following the in a line comment (off by default)
    - 'error'
    - 'always'
    - exceptions:
      - '*'
      - '-'
  wrap-regex: 0                  # require regex literals to be wrapped in parentheses (off by default)
  keyword-spacing: 2             # Enforce spacing before and after keywords


  ### LEGACY ###

  max-depth:        # specify the maximum depth that blocks can be nested (off by default)
    - 2
    - 4
  max-len:          # specify the maximum length of a line in your program (off by default)
    - 2
    - 120
  max-params: 0     # limits the number of parameters that can be used in the function declaration. (off by default)
  max-statements: 0 # specify the maximum number of statement allowed in a function (off by default)
  no-bitwise: 0     # disallow use of bitwise operators (off by default)
  no-plusplus: 2    # disallow use of unary operators, ++ and -- (off by default)

  ### NEW RULES ###

  no-unexpected-multiline: 2
  callback-return: 2
  init-declarations:
    - 2
    - 'always'
  global-require: 0
  no-negated-condition: 0
  no-useless-call: 2
  no-useless-concat: 2

  ### ES6 ###

  arrow-parens:
    - 2
    - 'as-needed'
  arrow-spacing:
    - 2
    - before: true
      after: true
  constructor-super: 2
  generator-star-spacing:
    - 2
    - before: true
      after: false
  no-confusing-arrow: 0 # Disallow arrow functions where they could be confused with comparisons
  no-class-assign: 2
  no-const-assign: 2
  no-dupe-class-members: 2
  no-this-before-super: 2
  prefer-arrow-callback: 0
  prefer-template: 2
  require-yield: 2
  arrow-body-style:
    - 2
    - 'as-needed'
  no-var: 2
  object-shorthand:
    - 2
    - 'always'
  prefer-const: 2

  ### REACT ###
  react/jsx-uses-react: 2
  react/jsx-uses-vars: 2
  react/prop-types: 1
  react/display-name: 0

  ### LODASH/FP ###
  lodash-fp/consistent-compose: 0
  lodash-fp/consistent-name:
    - 2
    - '_'
  lodash-fp/no-argumentless-calls: 2
  lodash-fp/no-chain: 2
  lodash-fp/no-extraneous-args: 2
  lodash-fp/no-extraneous-function-wrapping: 2
  lodash-fp/no-extraneous-iteratee-args: 2
  lodash-fp/no-for-each: 0
  lodash-fp/no-partial-of-curried: 2
  lodash-fp/no-single-composition: 2
  lodash-fp/no-submodule-destructuring: 2
  lodash-fp/no-unused-result: 2
  lodash-fp/prefer-compact: 2
  lodash-fp/prefer-composition-grouping: 2
  lodash-fp/prefer-constant:
    - 2
    - arrowFunctions: false
  lodash-fp/prefer-flat-map: 2
  lodash-fp/prefer-get: 2
  lodash-fp/prefer-identity:
    - 2
    - arrowFunctions: false
  lodash-fp/preferred-alias: 0
  lodash-fp/use-fp: 2

  ### AVA ###
  ava/assertion-arguments: 2
  ava/max-asserts:
    - 'off'
    - 5
  ava/no-async-fn-without-await: 2
  ava/no-cb-test: 'off'
  ava/no-duplicate-modifiers: 2
  ava/no-identical-title: 2
  ava/no-ignored-test-files: 2
  ava/no-invalid-end: 2
  ava/no-nested-tests: 2
  ava/no-only-test: 2
  ava/no-skip-assert: 2
  ava/no-skip-test: 2
  ava/no-statement-after-end: 2
  ava/no-todo-implementation: 2
  ava/no-todo-test: 'warn'
  ava/no-unknown-modifiers: 2
  ava/prefer-async-await: 0
  ava/prefer-power-assert: 'off'
  ava/test-ended: 2
  ava/test-title:
    - 2
    - 'if-multiple'
  ava/use-t-well: 2
  ava/use-t: 2
  ava/use-test: 2
  ava/use-true-false: 2
